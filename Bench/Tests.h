#pragma once
#include <functional>
#include <vector>
#include <chrono>
#include <iostream>
#include <random>

using Clock = std::chrono::high_resolution_clock;

constexpr auto max = 1000000;
constexpr auto count = 9400;

// All tests of a type use the same order generated by
// the random engine, if order is applicable
auto RandomEngine = std::default_random_engine(1);

// Holds arguments for all tests of a type
template<class T>
struct TestInit
{
	TestInit(std::vector<std::string> names,
		std::vector<bool> construct,
		std::vector<std::pair<std::function<T*()>, std::function<void(T*)>>> allocs)
		: names(names), construct(construct), allocs(allocs) {}

	using MyType = T;

	std::vector<size_t> order;
	std::vector<std::string> names;
	std::vector<bool> construct;
	std::vector<std::pair<std::function<T*()>, std::function<void(T*)>>> allocs;
};

// Holds arguments for individual tests of a type
template<class T, class Ctor>
struct IdvTestInit
{
	using MyType = T;

	IdvTestInit(TestInit<T>& init, int idx, Ctor& ctor) 
		: order(order), name(init.names[idx]), construct(init.construct[idx]), 
		  alloc(init.allocs[idx].first), dealloc(init.allocs[idx].second), ctor(ctor) {}

	const std::vector<size_t>& order;
	const std::string& name;
	bool construct;
	std::function<T*()>& alloc;
	std::function<void(T*)>& dealloc;
	Ctor& ctor;
};

template<class Init>
void basicAlloc(Init init)
{
	using T = typename Init::MyType;
	using TimeType = std::chrono::milliseconds;

	auto start = Clock::now();

	size_t num = 0;
	size_t idx = 0;
	size_t deallocTime = 0;
	std::vector<T*> ptrs;

	for (int i = 0; i < max; ++i)
	{
		if (i % count == 0)
		{
			idx = 0;
			auto start = Clock::now();

			for (auto& ptr : ptrs)
				init.dealloc(ptr);
			ptrs.clear();

			auto end = Clock::now();
			deallocTime += std::chrono::duration_cast<TimeType>(end - start).count();
		}

		ptrs.emplace_back(init.alloc());

		if (init.construct)
			init.ctor.construct(ptrs[idx]);
	}

	auto end = Clock::now();

	for (auto ptr : ptrs)
		init.dealloc(ptr);

	std::cout << init.name << " Time: " << std::chrono::duration_cast<TimeType>(end - start).count() - deallocTime << " " << num << '\n';
}

template<class Init>
void basicAlDeal(Init init)
{
	auto start = Clock::now();

	size_t num = 0;
	size_t idx = 0;
	for (int i = 0; i < max; ++i)
	{
		if (i % count == 0)
			idx = 0;

		auto* loc = init.alloc();

		if (init.construct)
			init.ctor.construct(loc);

		init.dealloc(loc);
	}

	auto end = Clock::now();

	std::cout << init.name << " Time: " << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() << " " << num << '\n';
}

template<class Init>
void randomAlDe(Init init)
{

}